// Remove all comments that begin with //, and replace appropriately.
// Feel free to modify ANYTHING in this file.

package loa;

import static loa.Piece.*;
import static loa.Side.*;

/** Represents the state of a game of Lines of Action, and allows making moves.
 *  @author */
class MutableBoard extends Board {

    /** A MutableBoard whose initial contents are taken from
     *  INITIALCONTENTS and in which it is PLAYER's move. The resulting
     *  Board has
     *        get(col, row) == INITIALCONTENTS[row-1][col-1]
     *  Assumes that PLAYER is not null and INITIALCONTENTS is 8x8.
     */
    MutableBoard(Piece[][] initialContents, Side player) {
        super(initialContents, player);
    }

    /** A new board in the standard initial position. */
    MutableBoard() {
        super();
    }

    /** A Board whose initial contents and state are copied from
     *  BOARD. */
    MutableBoard(Board board) {
        super(board);
    }

    /** Assuming isLegal(MOVE), make MOVE. */
    void makeMove(Move move) {
        if (isLegal(move)) {
            changeTurn();
            Piece temp = get(move.getCol0(), move.getRow0());
            set(move.getCol1(), move.getRow1(), temp);
            set(move.getCol0(), move.getRow0(), Piece.EMP);
            setNumMoves(getNumMoves() + 1);
        }
    }
    
    private void set(int c, int r, Piece piece) {
        getSetup()[8-r][c-1] = piece;
    }
    
    private void changeTurn() {
        setSide(getSide().opponent());
    }

    /** Retract (unmake) one move, returning to the state immediately before
     *  that move.  Requires that movesMade () > 0. */
    void retract() {
        assert movesMade() > 0;
        // REPLACE WITH IMPLEMENTATION
    }

}
