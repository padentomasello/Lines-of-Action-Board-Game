// Remove all comments that begin with //, and replace appropriately.
// Feel free to modify ANYTHING in this file.

package loa;

import java.util.Random;
import java.util.Scanner;
import java.util.regex.MatchResult;

import ucb.util.Stopwatch;

/** Represents one game of Lines of Action.
 *  @author */
class Game {

    /** A new Game between NUMHUMAN humans and 2-NUMHUMAN AIs.  SIDE0
     *  indicates which side the first player (known as ``you'') is
     *  playing.  SEED is a random seed for random-number generation.
     *  TIME is the time limit each side has to make its moves (in seconds).
     */
    Game(int _numHuman, Side _side0, long _seed, int _time) {
        _randomSource = new Random(seed);
        side = _side0;
        Player player1, player2;
        if (_numHuman == 2) {
            player1 = new HumanPlayer(side, this);
            player2 = new HumanPlayer(side.opponent(), this);
        } else if (_numHuman == 1) {
            player1 = new HumanPlayer(side, this);
            player2 = new MachinePlayer(side.opponent(), this);
        } else {
            player1 = new MachinePlayer(side, this);
            player2 = new MachinePlayer(side.opponent(), this);
        }
        if (_side0 == Side.WHITE) {
            whitePlayer = player1;
            blackPlayer = player2;
        } else {
            whitePlayer = player2;
            blackPlayer = player1;
        }

        _board = new MutableBoard(Board.INITIAL_PIECES, Side.BLACK);
        _randomSource = new Random(_seed);
        time = _time;
    }

    /** Return the current board. */
    Board getBoard() {
        return _board;
    }

    /** Return a move from the terminal.  Processes any intervening commands
     *  as well. */
    String getMove() {
        return "";  // REPLACE WITH IMPLEMENTATION
    }

    /** Play this game, printing any transcript and other results. */
    public void play() {
        if (Reporter.getMessageLevel() != 0) {
            System.out.println("Number of Humans: " + numHuman);
            System.out.println("Side of first player: " + side);
            System.out.println("Random Seed: " + seed);
            System.out.println("Maximun time limit: " + time);
        }

        blackWatch = new Stopwatch();
        whiteWatch = new Stopwatch();
        Move move;
        while (!_board.gameOver()) {
            blackWatch.start();
            move = blackPlayer.makeMove();
            blackWatch.stop();
            if (blackWatch.getAccum() / 1000 > time) {
                System.out.println("White Player wins");
                System.exit(0);
            } else {
                _board.makeMove(move);
            }
            whiteWatch.start();
            move = whitePlayer.makeMove();
            if (whiteWatch.getAccum() / 1000 > time) {
                System.out.println("Black Player wins");
                System.exit(0);
            } else {
                _board.makeMove(move);
            }
            whiteWatch.stop();
        }
    }


    /** Return time remaining for SIDE (in seconds). */
    int timeRemaining(Side side) {
        return 0; // REPLACE WITH IMPLEMENTATION
    }

    /** Return the random number generator for this game. */
    Random getRandomSource() {
        return _randomSource;
    }

    /** Prints board */
    public void printBoard() {
        _board.toString();
    }

    /** The official game board. */
    private MutableBoard _board;

    /** A source of random numbers, primed to deliver the same sequence in
     *  any Game with the same seed value. */
    private Random _randomSource;

    // OTHER STUFF HERE

    /** numHuman is number of human players. Time is time limit */
    private int numHuman, time;
    /** Random generator seed */
    private long seed;
    /** Side of first player */
    private Side side;

    /**Players of the game */
    Player blackPlayer, whitePlayer;

    /** Stopwatch for player1 and 2 respectively */
    Stopwatch blackWatch, whiteWatch;

    /** MAGIC number for 1000. */
    static final double THOUSAND = 1000;

}
