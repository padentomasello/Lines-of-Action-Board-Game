// Remove all comments that begin with //, and replace appropriately.
// Feel free to modify ANYTHING in this file.

package loa;

import java.util.Iterator;

import static loa.Piece.*;
import static loa.Side.*;

/** Represents the state of a game of Lines of Action. A Board is immutable.
 *  Its MutableBoard subclass allows moves to be made.
 *  @author
 */
class Board {

    /** A Board whose initial contents are taken from
     *  INITIALCONTENTS and in which it is PLAYER's move. The resulting
     *  Board has
     *        get(col, row) == INITIALCONTENTS[row-1][col-1]
     *  Assumes that PLAYER is not null and INITIALCONTENTS is 8x8.
     */
    Board(Piece[][] initialContents, Side player) {
        assert player != null && initialContents.length == 8;
        System.arraycopy(initialContents, 0, setup, 0, 8);
        setSide(player);
    }

    /** A new board in the standard initial position. */
    Board() {
        this(INITIAL_PIECES, BLACK);
    }

    /** A Board whose initial contents and state are copied from
     *  BOARD. */
    Board(Board board) {
        this(board.setup, BLACK);
    }

    /** Return the contents of column C, row R, where 1 <= C,R <= 8,
     *  where column 1 corresponds to column 'a' in the standard
     *  notation. */
    Piece get(int c, int r) {
        assert 1 <= c && c <= 8 && 1 <= r && r <= 8;
        return setup[8-r][c-1];
    }

    /** Return the contents of the square SQ.  SQ must be the
     *  standard printed designation of a square (having the form cr,
     *  where c is a letter from a-h and r is a digit from 1-8). */
    Piece get(String sq) {
        return get(col(sq), row(sq));
    }

    /** Return the column number (a value in the range 1-8) for SQ.
     *  SQ is as for {@link get(String)}. */
    static int col(String sq) {
        return Character.getNumericValue(sq.charAt(0)) - 9;
    }

    /** Return the row number (a value in the range 1-8) for SQ.
     *  SQ is as for {@link get(String)}. */
    static int row(String sq) {
        return Integer.parseInt(sq.substring(1));
    }

    /** Return the Side that is currently next to move. */
    Side turn() {
        return getSide();
    }

    /** Return true iff MOVE is legal for the player currently on move. */
    boolean isLegal(Move move) {
        if (get(move.getCol0(), move.getRow0()).side() != turn()) {
            return false;
        }
        if (piecesOnLine(move) != move.length()) {
            return false;
        } 
        if (move.isColMove()) {
            return isLegalColJumping(move);
        }
        if (move.isRowMove()) {
            return isLegalRowJumping(move);
        }
        if (move.isDiagnalUp()) {
            return isLegalDiagnalUpJump(move);
        }
        if (move.isDiagnalDown()) {
            return isLegalDiagnalDownJump(move);
        }
        return false;
    }
    
    /** Returns true if piece does not jump over opposing pieces and
     * does not land on it's own color. */
    boolean isLegalDiagnalDownJump(Move move) {
        Piece piece = get(move.getCol0(), move.getRow0());
        Side pieceSide = piece.side();
        if (pieceSide == get(move.getCol1(), move.getRow1()).side()) {
            return false;
        }
        int row0 = move.getRow0();
        int row1 = move.getRow1();
        int col0 = move.getCol0();
        if (move.increasing()) {
            for (int i = 1; i < move.length(); i += 1) {
                if (get(col0 + i, row0 - i).side() == pieceSide.opponent()) {
                    return false;
                }
            }
        } else {
            for (int i = 1; i < move.length() ; i += 1) {
                if (get(col0 - i, row0 + i).side() == pieceSide.opponent()) {
                    return false;
                }
            }
        }
        return true;
    }
    
    /** Returns true if piece does not jump over opposing pieces and
     * does not land on it's own color.
     */
    boolean isLegalDiagnalUpJump(Move move) {
        Piece piece = get(move.getCol0(), move.getRow0());
        Side pieceSide = piece.side();
        if (pieceSide == get(move.getCol1(), move.getRow1()).side()) {
            return false;
        }
        int row0 = move.getRow0();
        int row1 = move.getRow1();
        int col0 = move.getCol0();
        if (move.increasing()) {
            for (int i = 1; i < row1 - row0; i += 1) {
                if (get(col0 + i, row0 + i).side() == pieceSide.opponent()) {
                    return false;
                }
            }
        } else {
            for (int i = move.length() -1 ; i > 1; i -= 1) {
                if (get(col0 - i, row0 - i).side() == pieceSide.opponent()) {
                    return false;
                }
            }
        }
        return true;
    }
    
    /** Returns true if piece does not jump over oppising pieces 
     * and does not land on it's own color;
     */
    boolean isLegalRowJumping(Move move) {
        Piece piece = get(move.getCol0(), move.getRow0());
        Side pieceSide = piece.side();
        if (pieceSide == get(move.getCol1(), move.getRow1()).side()) {
            return false;
        }
        if (move.increasing()) {
            for (int i = move.getRow0() + 1; i < move.getRow1(); i += 1) {
                if (get(move.getCol0(), i).side() == pieceSide.opponent()) {
                    return false;
                }
            }
        } else {
            for (int i = move.getCol0(); i > move.getCol1(); i -= 1) {
                if (get(move.getCol0(), i).side() == pieceSide.opponent()) {
                    return false;
                }
            }
        }
        return true;
    }

    /** Returns true if piece does not jump over opposing pieces
     * and does not land on it's own color piece
     */
    boolean isLegalColJumping(Move move) {
        Piece piece = get(move.getCol0(), move.getRow0());
        Side pieceSide = piece.side();
        if (pieceSide == get(move.getCol1(), move.getRow1()).side()) {
            return false;
        }
        if (move.increasing()) {
            for (int i = move.getCol0() + 1; i < move.getCol1(); i += 1) {
                if (get(i, move.getRow0()).side() == pieceSide.opponent()) {
                    return false;
                }
            }
        } else {
            for (int i = move.getCol0() - 1; i > move.getCol1(); i -= 1) {
                Side otherpieceside = get(i, move.getRow0()).side();
                if (otherpieceside == pieceSide.opponent()) {
                    return false;
                }
            }
        }
        return true;
    }
    /** Returns number of pieces along line of move */ 
    int piecesOnLine(Move move) {
        if (move.isColMove()) {
            return piecesColMove(move);
        } else if (move.isRowMove()) {
            return piecesRowMove(move);
        } else if (move.isDiagnalUp()) {
            return diagnalPiecesUp(move);
        } else if (move.isDiagnalDown()) {
            return diagnalPiecesDown(move);
        } else {
            return 0;
        }
    }


    /** Return true iff MOVE is legal and along row */ 
    int piecesRowMove(Move move) {
        int numPieces = 0; 
        for (int i = 1; i <= 8; i += 1) {
            if (get(move.getCol0(), i) != Piece.EMP) {
                numPieces += 1;
            }
        }
        return numPieces;
    }

    /** Returns true iff Move is legal and along colomb */
    int piecesColMove(Move move) {
        int numPieces = 0;
        for (int i = 1; i <= 8; i += 1) {
            if (get(i, move.getRow0()) != Piece.EMP) {
                numPieces += 1;
            }
        }
        return numPieces;
    }
    /** Returns number of Nonempty pieces on upward sloped
     * diagnal from sq with Coloumb C and Row R.
     */
    int diagnalPiecesUp(Move move) {
        int c = move.getCol0();
        int r = move.getRow0();
        int numPieces = 0;
        while (c > 1 && r > 1) {
            c -= 1;
            r -= 1;
        }
        while (c <= 8 && r <= 8) {
            if (get(c, r) != Piece.EMP) {
                numPieces += 1;
            }
            c += 1;
            r += 1;
        }
        return numPieces;
    }
    /** Returns number of nonEmpy pieces on a downslope diagnal from 
     * @param c Columb of square
     * @param r Row of square
     */
    int diagnalPiecesDown(Move move) {
        int c = move.getCol0();
        int r = move.getRow0();
        int numPieces = 0;
        while (c < 8 && r > 1) {
            c += 1;
            r -= 1;
        }
        while (c >= 1 && r <= 8) {
            if (get(c, r) != Piece.EMP) {
                numPieces += 1;
            }
            c -= 1;
            r += 1;
        }
        return numPieces;
    }

    /** Return a sequence of all legal from this position. */
    Iterator<Move> legalMoves() {
        return null;
    }

    /** Return true iff the game is currently over.  A game is over if
     *  either player has all his pieces continguous. */
    boolean gameOver() {
        return piecesContiguous(BLACK) || piecesContiguous(WHITE);
    }

    /** Return true iff PLAYER's pieces are continguous. */
    boolean piecesContiguous(Side player) {
        for (int i= 0; i < setup.length; i += 1) {
            for (int k = 0; k < setup.length; k += 1) {
                if (setup[i][k].side() != player) {
                    continue;
                } else if (!pieceContiguous(setup[i][k], i, k)) {
                    return !multiplepieces(player, i , k);
                }
            }
        }
        return true;
    }
    /**Returns true if their are multiple pieces in board of side */
    private boolean multiplepieces(Side player, int c,int r) {
        for (int i = 0; i < setup.length; i += 1) {
            for (int j = 0; j < setup.length; j += 1) {
                if ((i == c) && (j == r)) {
                    continue;
                } else {
                    if (setup[i][j].side() == player) {
                        return true;
                    }
                }
            }
        }
        return false;
        
    }

    /** Returns true if a piece PIECE at sport C and R has atleast one
     * adjacent piece.
     */
    private boolean pieceContiguous(Piece piece, int c, int r) {
        for (int i = -1; i < 2; i += 1) {
            for (int k = -1; k < 2; k += 1) {
                try {
                    if (piece.equals(setup[c+i][r+k])) {
                        if ((k == 0) & (i == 0)) {
                            continue;
                        } else {
                            return true;
                        }
                    }
                } catch (ArrayIndexOutOfBoundsException e) {
                    continue;
                }
            }
        }
        return false;
    }

    /** Return the total number of moves that have been made (and not
     *  retracted).  Each valid call to makeMove with a normal move increases
     *  this number by 1. */
    int movesMade() {
        return numMoves; // REPLACE WITH IMPLEMENTATION
    }

    /** Returns move #K used to reach the current position, where
     *  0 <= K < movesMade().  Does not include retracted moves. */
    Move getMove(int k) {
        return null; // REPLACE WITH IMPLEMENTATION
    }

    @Override
    public String toString() {
        String result = "===\n";
        for (Piece[] piecearray: setup) {
            for (Piece piece: piecearray) {
                result = result.concat(piece.textName()+ " ");
            }
            result = result.concat("\n");
        }
        result = result.concat("Next move: " + side + "\n");
        result = result.concat("Moves: " + movesMade() + "\n");
        result = result.concat("===");
        return result;
    }

    protected Side getSide() {
        return side;
    }

    protected void setSide(Side side) {
        this.side = side;
    }

    /** Represents board configuration */
    private Piece[][] setup = new Piece[8][8];

    /**
     * @return the setup
     */
    public Piece[][] getSetup() {
        return setup;
    }

    /** Player's side move */
    private Side side;
    
    /** Number of moves made */
    private int numMoves= 0;


    /**
     * @return the numMoves
     */
    public int getNumMoves() {
        return numMoves;
    }

    /**
     * @param numMoves the numMoves to set
     */
    public void setNumMoves(int numMoves0) {
        numMoves = numMoves0;
    }

    /** The standard initial configuration for Lines of Action. */
    static final Piece[][] INITIAL_PIECES = {
        { EMP, BP,  BP,  BP,  BP,  BP,  BP,  EMP },
        { WP,  EMP, EMP, EMP, EMP, EMP, EMP, WP  },
        { WP,  EMP, EMP, EMP, EMP, EMP, EMP, WP  },
        { WP,  EMP, EMP, EMP, EMP, EMP, EMP, WP  },
        { WP,  EMP, EMP, EMP, EMP, EMP, EMP, WP  },
        { WP,  EMP, EMP, EMP, EMP, EMP, EMP, WP  },
        { WP,  EMP, EMP, EMP, EMP, EMP, EMP, WP  },
        { EMP, BP,  BP,  BP,  BP,  BP,  BP,  EMP }
    };

}
